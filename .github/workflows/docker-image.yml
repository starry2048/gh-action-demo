name: docker-CI

run-name: ${{ github.actor }} is testing out docker-image ðŸš€

on:
  # Compare the preceeding commit of main -> to the current commit of the main branch.
  # (Note: To compare changes between the last pushed commit to the remote main branch set `since_last_remote_commit: true`)
  push:
    # branches:
    #   - main
  # Compare the last commit of main -> to the current commit of a PR branch. 
  # (Note: To compare changes between the last pushed commit to the remote PR branch set `since_last_remote_commit: true`)
  # pull_request:
    # branches:
    #   - main
  workflow_dispatch:


env:
  # BUILD_PROGRESS: plain
  TZ: Asia/Shanghai
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: ristar20
  DOCKER_IMAGE_BASE: u20
  DOCKER_IMAGE_FULL_BASE: ristar20/u20
  USE_BUILDX: 1
  WITH_PUSH: 

jobs:
  # env_check:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     output1: ${{ steps.step1.outputs.image_base }}
  #   steps:
  #     - id: step1
  #       run:  echo "::set-output name=test::hello"

  build:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    steps:
      - name: check time
        run: |
          echo "now: $(date +'%Y-%m-%dT%H:%M:%S')"

      - name: Set timezone and set current date as env variable
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Echo current time
        run: echo $BUILD_TIME # Gives "2022-12-11T01:42:20"

      - name: Echo current env
        run: env

      - name: Run changed-files with dir_names
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35
        with:
          dir_names: "true"
          dir_names_max_depth: 1

      - name: List all changed-files with dir_names
        run: |
          for file in ${{ steps.changed-files-dir-names.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      - name: 00.cuda
        if: contains(steps.changed-files-dir-names.outputs.modified_files, '00.cuda')
        run: |
          echo "00.cuda file has been modified."

      -
        name: Docker meta
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            name/app

      - name: test out
        id: test-out
        run: |
          echo ${{ steps.meta.outputs.json }}

      - name: test out1
        id: test-out1
        run: |
          echo "${{ steps.meta.outputs.labels }}"

      - id: setlabel1
        env:
          label: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
        run: |
          echo "${{ join(env.label, '\n') }}"
      
      - name: t0
        env:
          label: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
        run: |
          echo 'labels=\"${{ join(env.label, "\\n") }}\"'

      - id: setlabel2
        env:
          label: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
        run: |
          echo "labels=\"${{ join(env.label, "\\n") }}\"" >> $GITHUB_OUTPUT
      - id: setlabel
        env:
          label: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
        run: |
          echo "labels=\"${{ join(env.label, '\n') }}\"">> $GITHUB_OUTPUT
      
      - name: echo label0
        run: echo "${{ steps.setlabel.outputs.labels }}"

      # - name: echo label
      #   run: echo "${{ fromJSON(steps.setlabel.outputs.labels) }}"
      # - name: echo label1
      #   run: echo ${{ fromJSON(steps.setlabel.outputs.labels) }}
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      # -
      #   name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      -
        name: Login to Docker Hub
        if: ${{ env.WITH_PUSH == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: "01.gl/"
          push: ${{ env.WITH_PUSH == 'true' }}
          labels: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          tags: |
            ${{ env.DOCKER_IMAGE_FULL_BASE }}-cuda:cuda11.7-cudnn8-gl-dev

          
      # - name: Run docker build / push
      #   # WITH_PUSH is used here to determine whether or not to add the --push flag
      #   env:
      #     DOCKER_IMAGE_SUFFIX: cuda
      #     DOCKER_VERSION: cuda11.7-cudnn8-gl-dev
      #     BUILD_FROM: ubuntu:20.04
      #     DOCKER_FILE: 01.gl/
      #   run: |
      #     make -f docker.Makefile 



      # Example 2
      # - name: Get changed files in the docs folder
      #   id: changed-files-specific
      #   uses: tj-actions/changed-files@v35
      #   with:
      #     files: |
      #       docs/**

      # - name: Run step if any file(s) in the docs folder change
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: |
      #     echo "One or more files in the docs folder has changed."
      #     echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"