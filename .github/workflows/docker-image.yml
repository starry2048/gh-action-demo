name: docker-image-CI

run-name: ${{ github.actor }} is building docker-image ðŸš€

on:
  workflow_dispatch:
  # Compare the preceeding commit of main -> to the current commit of the main branch.
  # (Note: To compare changes between the last pushed commit to the remote main branch set `since_last_remote_commit: true`)
  push:
  #   branches:
  #     - u20
  # Compare the last commit of main -> to the current commit of a PR branch. 
  # (Note: To compare changes between the last pushed commit to the remote PR branch set `since_last_remote_commit: true`)
  # pull_request:
    # branches:
    #   - main


env:
  BUILD_PROGRESS: plain
  TZ: Asia/Shanghai
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: ristar20
  DOCKER_IMAGE_BASE: u20
  DOCKER_IMAGE_FULL_BASE: ristar20/u20
  USE_BUILDX: 1
  WITH_PUSH: ${{ ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch') ) && ((github.event.ref == 'refs/heads/master' || github.event.ref == 'refs/heads/u20' || (startsWith(github.event.ref, 'refs/tags/') && !startsWith(github.event.ref, 'refs/tags/ciflow/'))) ) }}
  FORCE_BUILD_FLAG: $${ env.WITH_PUSH && (github.event_name == 'workflow_dispatch') }}

jobs:
  build:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Build docker images
    steps:
      # - name: check time
      #   run: |
      #     echo "now: $(date +'%Y-%m-%dT%H:%M:%S')"

      - name: Set timezone and set current date as env variable
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
          echo "BUILD_TIME_S=$(date +'%y%m%dT%H%M%S')" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      # Gives "2022-12-11T01:42:20"
      - name: Echo current time and env
        run: |
          echo $BUILD_TIME 
          echo ------------------------------------
          env

      - name: Run changed-files with dir_names
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35
        with:
          dir_names: "true"
          dir_names_max_depth: 1

      - name: List all changed-files with dir_names
        run: |
          for file in ${{ steps.changed-files-dir-names.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      # - name: 00.cuda
      #   if: contains(steps.changed-files-dir-names.outputs.modified_files, '00.cuda')
      #   run: |
      #     echo "00.cuda file has been modified."

      -
        name: Docker meta
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            name/app

      - name: set labels
        id: setlabels
        env:
          label: |
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            con.image.build.time_CST=$BUILD_TIME
            con.image.build.host=GithubAction
        run: |
          vlabel="${{ env.label }}"
          echo vlabel="${vlabel}"

          echo 'GH_ACT_LAEBLS<<EOF' >> $GITHUB_ENV
          echo "${vlabel}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          echo 'GH_ACT_LAEBLS<<EOF' >> $GITHUB_OUTPUT
          echo "${vlabel}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo 'GH_ACT_META_JSON<<EOF' >> $GITHUB_ENV
          echo ${{ toJSON(steps.meta.outputs.json) }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          echo 'GH_ACT_MODIFIED_FILES<<EOF' >> $GITHUB_ENV
          echo "${{ steps.changed-files-dir-names.outputs.modified_files }}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: echo labels
        run: |
          echo "${{ env.GH_ACT_LAEBLS }}" 
          echo "${{ steps.setlabels.outputs.GH_ACT_LAEBLS }}" 

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Login to Docker Hub
        if: ${{ env.WITH_PUSH == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: build_01
        uses: ./.github/actions/docker-build-action
        with:
          context: 01.gl/
          tags: ${{ env.DOCKER_IMAGE_FULL_BASE }}-cuda:cuda11.7-cudnn8-gl
          build-from: nvidia/cuda:11.7.0-cudnn8-devel-ubuntu20.04
      - 
        run: |
          echo "${{ steps.build_01.outputs.imageid }}" 
          echo "${{ steps.build_01.outputs.digest }}" 
          echo "${{ steps.build_01.outputs.metadata }}" 
      # -
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: ${{ env.WITH_PUSH == 'true' }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     labels: ${{ steps.setlabels.outputs.GH_ACT_LAEBLS }}
      #     context: 01.gl/
      #     tags: ${{ env.DOCKER_IMAGE_FULL_BASE }}-cuda:cuda11.7-cudnn8-gl
      #     build-args: from=nvidia/cuda:11.7.0-cudnn8-devel-ubuntu20.04
          
      # - name: Run docker build / push
      #   # WITH_PUSH is used here to determine whether or not to add the --push flag
      #   env:
      #     DOCKER_IMAGE_SUFFIX: cuda
      #     DOCKER_VERSION: cuda11.7-cudnn8-gl-dev
      #     BUILD_FROM: ubuntu:20.04
      #     DOCKER_FILE: 01.gl/
      #   run: |
      #     make -f docker.Makefile 
