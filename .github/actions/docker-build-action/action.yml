name: 'docker build action'
description: 'docker build action'
inputs:
  context:  
    description: 'context'
    required: true
    default: '.'
  tags:  
    description: 'tags'
    required: true
    default: ''
  build-from:  
    description: 'build from'
    required: false
    default: ''
  force-build:
    description: 'whether force build image'
    required: false
    default: false
outputs:
  imageid:
    description: 'Image ID'
    value: ${{ steps.build-and-push.outputs.imageid }}
  digest:
    description: 'Image digest'
    value: ${{ steps.build-and-push.outputs.digest }}
  metadata:
    description: 'Build result metadata'
    value: ${{ steps.build-and-push.outputs.metadata }}
  tags:
    description: 'tags'
    value: ${{ inputs.tags }}
  build_flag:
    description: 'build_flag'
    value: ${{ steps.check-arg.outputs.build_flag }}
  
runs:
  using: "composite"
  steps:
    - name: check required env variables
      if: ${{ (env.GH_ACT_LAEBLS == '') || ( env.DOCKER_IMAGE_FULL_BASE == '') }}
      run: |
        echo "Please check the environment variables:"
        echo env.GH_ACT_LAEBLS=${env.GH_ACT_LAEBLS}
        echo env.DOCKER_IMAGE_FULL_BASE=${env.DOCKER_IMAGE_FULL_BASE}
        exit 1
      shell: bash
    
    - run: |
        echo "Prepare to build image with tags: ${{ inputs.tags }}"
      shell: bash

    - id: check-arg
      run: |
        [ "${{ inputs.build-from }}" != "" ] ||  echo "from_flag=" >> $GITHUB_OUTPUT
        [ "${{ inputs.build-from }}" == "" ] ||  echo "from_flag=from=${{ inputs.build-from }}" >> $GITHUB_OUTPUT

        context_folder=$(echo "${{inputs.context}}" | sed 's/\/$//')
        echo "context_folder="${context_folder}"" >> $GITHUB_OUTPUT
        echo env.GH_ACT_MODIFIED_FILES="${{env.GH_ACT_MODIFIED_FILES}}"

        echo FORCE_BUILD_FLAG="${{env.FORCE_BUILD_FLAG}}"
        echo inputs.force-build="${{inputs.force-build}}"
        echo BUILD_FLAG=${{env.FORCE_BUILD_FLAG || inputs.force-build || contains(env.GH_ACT_MODIFIED_FILES, steps.check-arg.outputs.context_folder)}}
        echo "build_flag=${BUILD_FLAG}" >> $GITHUB_OUTPUT

        [ "${BUILD_FLAG}" != "true" ] ||  echo "✅ build image"
        [ "${BUILD_FLAG}" == "true" ] ||  echo "❌ not build image"
      shell: bash

    - run: |
        echo context_folder="${{ steps.check-arg.outputs.context_folder }}"
        echo build_flag="${{ steps.check-arg.outputs.build_flag }}"
        echo GH_ACT_MODIFIED_FILES="${{ env.GH_ACT_MODIFIED_FILES }}"
        echo GH_ACT_META_JSON="${{ env.GH_ACT_META_JSON }}"
      shell: bash

    - id: build-and-push
      uses: docker/build-push-action@v3
      with:
        push: ${{ env.WITH_PUSH == 'true' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          ${{ env.GH_ACT_LAEBLS }}
          con.image.build-from=${{ inputs.build-from }}

        context: ${{ inputs.context }}
        tags: |
          ${{ inputs.tags }}
          ${{ inputs.tags }}_v${{ env.BUILD_TIME_S }}
        build-args: ${{ steps.check-arg.outputs.from_flag }}
      if: ${{ steps.check-arg.outputs.build_flag == 'true' }}
    
    - run: |
        echo imageid="${{steps.build-and-push.outputs.imageid}}"
        echo digest="${{steps.build-and-push.outputs.digest}}"
        echo metadata="${{steps.build-and-push.outputs.metadata}}"
      shell: bash